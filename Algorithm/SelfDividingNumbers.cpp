/////////////////////////////////////////////////////////////////////////
//  除数 是指可以被它包含的每一位数除尽的数。
//  例如，128 是一个自除数，因为 128 % 1 == 0，128 % 2 == 0，128 % 8 == 0。
//  还有，自除数不允许包含 0 。
//  给定上边界和下边界数字，输出一个列表，列表的元素是边界（含边界）内所有的自除数。
/////////////////////////////////////////////////////////////////////////
//  https://leetcode-cn.com/problems/self-dividing-numbers/description/
/////////////////////////////////////////////////////////////////////////

//  有空优化下这代码 = =

class Solution 
{
    public:
    
    vector<int> selfDividingNumbers(int left, int right) 
    {
        vector<int> v;
        
        for (int i = left; i <= right; i++)
        {
            if (i < 10)
            {
                v.push_back(i);
            }
            else if (i < 100)
            {
                if(i % 10 != 0)
                {
                    if (i % (i / 10 % 10) == 0 && i % (i % 10) == 0)
                    {
                        v.push_back(i);
                    }
                }
            }
            else if(i < 1000)
            {
                if (i / 10 % 10 != 0 && i % 10 != 0)
                {
                    if (i % (i / 100 % 10) == 0 && i % (i / 10 % 10) == 0 && i % (i % 10) == 0)
                    {
                        v.push_back(i);
                    }
                }
            }
            else if(i < 10000)
            {
                if (i / 100 % 10 != 0 && i / 10 % 10 != 0 && i % 10 != 0)
                {
                    if (i % (i / 1000 % 10) == 0 && i % (i / 100 % 10) == 0 && i % (i / 10 % 10) == 0 && i % (i % 10) == 0)
                    {
                        v.push_back(i);
                    }
                }
            }
            else if (i == 10000)
            {
                v.push_back(i);
            }
        }
        
        return v;
    }
};
